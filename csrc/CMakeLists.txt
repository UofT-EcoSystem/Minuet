set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CUDA_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED TRUE)
set(CMAKE_CUDA_STANDARD_REQUIRED TRUE)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra")
set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -lineinfo")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O3")
set(CMAKE_CUDA_FLAGS_RELEASE "${CMAKE_CUDA_FLAGS_RELEASE} -O3 -Xptxas -O3 -lineinfo")

set(Python_USE_STATIC_LIBS FALSE)
set(Python_FIND_VIRTUALENV FIRST)
find_package(Python COMPONENTS Interpreter Development REQUIRED)

execute_process(
        COMMAND ${Python_EXECUTABLE} "${PROJECT_SOURCE_DIR}/utils/gather_build_info.py"
        OUTPUT_VARIABLE MINUET_BUILD_INFO
        OUTPUT_STRIP_TRAILING_WHITESPACE)
string(REPLACE "\n" ";" MINUET_BUILD_INFO ${MINUET_BUILD_INFO})
list(GET MINUET_BUILD_INFO 0 PYBIND11_CMAKE_PREFIX_PATH)
list(GET MINUET_BUILD_INFO 1 TORCH_CMAKE_PREFIX_PATH)
list(GET MINUET_BUILD_INFO 2 TORCH_CUDA_AVAILABLE)
list(GET MINUET_BUILD_INFO 3 TORCH_CUDA_MAJOR_VERSION)
list(GET MINUET_BUILD_INFO 4 PIP_CUBLAS_PATH)

if (TORCH_CUDA_AVAILABLE STREQUAL "True" OR "$ENV{MINUET_ENABLE_CUDA}" STREQUAL "1")
    set(ENABLE_CUDA ON CACHE BOOL "Whether to enable CUDA" FORCE)
else ()
    set(ENABLE_CUDA OFF CACHE BOOL "Whether to enable CUDA" FORCE)
endif ()

if (ENABLE_CUDA)
    if (PIP_CUBLAS_PATH EQUAL "None")
        if (DEFINED ENV{CUDA_TOOLKIT_ROOT})
            set(CUDAToolkit_ROOT $ENV{CUDA_TOOLKIT_ROOT})
        endif ()
        find_package(CUDAToolkit ${TORCH_CUDA_MAJOR_VERSION} EXACT REQUIRED)
    endif ()
    if (DEFINED ENV{MINUET_CUDA_ARCH_LIST})
        set(TORCH_CUDA_ARCH_LIST $ENV{MINUET_CUDA_ARCH_LIST})
    endif ()
endif ()

list(APPEND CMAKE_PREFIX_PATH "${TORCH_CMAKE_PREFIX_PATH}")
find_package(Torch PATHS ${TORCH_CMAKE_PREFIX_PATH} NO_DEFAULT_PATH REQUIRED)
find_library(TORCH_PYTHON_LIBRARY torch_python PATHS "${TORCH_INSTALL_PREFIX}/lib" NO_DEFAULT_PATH REQUIRED)
if (PYBIND11_CMAKE_PREFIX_PATH EQUAL "None")
    find_package(pybind11 REQUIRED CONFIG)
else ()
    list(APPEND CMAKE_PREFIX_PATH "${PYBIND11_CMAKE_PREFIX_PATH}")
    find_package(pybind11 PATHS ${PYBIND11_CMAKE_PREFIX_PATH} NO_DEFAULT_PATH REQUIRED CONFIG)
endif ()

find_package(OpenMP REQUIRED)

file(GLOB_RECURSE MINUET_HEADERS "${CMAKE_CURRENT_SOURCE_DIR}/minuet/cpu/**.h")
file(GLOB_RECURSE MINUET_SOURCES "${CMAKE_CURRENT_SOURCE_DIR}/minuet/cpu/**.cpp")
file(GLOB_RECURSE MINUET_TORCH_SOURCES "${CMAKE_CURRENT_SOURCE_DIR}/minuet/torch/**.cpp")
if (ENABLE_CUDA)
    file(GLOB_RECURSE MINUET_CUDA_HEADERS "${CMAKE_CURRENT_SOURCE_DIR}/minuet/cuda/**.cuh")
    file(GLOB_RECURSE MINUET_CUDA_SOURCES "${CMAKE_CURRENT_SOURCE_DIR}/minuet/cuda/**.cu")
    file(GLOB_RECURSE MINUET_TORCH_CUDA_SOURCES "${CMAKE_CURRENT_SOURCE_DIR}/minuet/torch/**.cu")
    list(APPEND MINUET_HEADERS ${MINUET_CUDA_HEADERS})
    list(APPEND MINUET_SOURCES ${MINUET_CUDA_SOURCES})
    list(APPEND MINUET_TORCH_CUDA_SOURCES ${MINUET_TORCH_SOURCES})
endif ()

# add the minuet package
add_library(minuet STATIC)
target_sources(minuet
        INTERFACE ${MINUET_HEADERS}
        PRIVATE ${MINUET_SOURCES})
if (ENABLE_CUDA)
    target_include_directories(minuet PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}")
    if (PIP_CUBLAS_PATH EQUAL "None")
        message(STATUS "Linking to cuBLAS from CUDAToolkit")
        target_link_libraries(minuet PUBLIC OpenMP::OpenMP_CXX CUDA::cublas)
    else ()
        message(STATUS "Linking to cuBLAS from python package at ${PIP_CUBLAS_PATH}")
        target_link_directories(minuet PUBLIC "${PIP_CUBLAS_PATH}/lib")
        target_link_libraries(minuet PUBLIC OpenMP::OpenMP_CXX cublas)
        target_include_directories(minuet PUBLIC "${PIP_CUBLAS_PATH}/include")
    endif ()
else ()
    target_include_directories(minuet PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}")
    target_link_libraries(minuet PUBLIC OpenMP::OpenMP_CXX)
endif ()
set_target_properties(minuet PROPERTIES POSITION_INDEPENDENT_CODE ON)

# add the pybind11 interface
if (NOT DEFINED TORCH_EXTENSION_NAME)
    message(FATAL_ERROR "TORCH_EXTENSION_NAME must be defined by \"cmake -DTORCH_EXTENSION_NAME=<name of the extension>\"")
endif ()

pybind11_add_module(minuet_torch "${MINUET_TORCH_CUDA_SOURCES}")
target_link_libraries(minuet_torch PRIVATE minuet ${TORCH_LIBRARIES} ${TORCH_PYTHON_LIBRARY} Python::Python)
target_compile_definitions(minuet_torch PRIVATE -DTORCH_EXTENSION_NAME=${TORCH_EXTENSION_NAME})
set_target_properties(minuet_torch PROPERTIES OUTPUT_NAME ${TORCH_EXTENSION_NAME})
if (ENABLE_CUDA)
    target_compile_definitions(minuet_torch PRIVATE -DENABLE_CUDA)
endif ()
